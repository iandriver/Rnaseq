fix bit with aligner as a command-line param....

checking success:
- Have to update pipeline_run of status, success if failed
- Have to record success/failure of step_run 

pipeline run:
- Verify that the pipeline exists in the db; get id
- Create and insert a pipeline_run object using pipeline_id et al
- Incorporate pipeline_run id into script for updates:
- - Before starting step:
python bin/provenance insert StepRun pipeline_run_id=$id status='started'

- - On success:
python bin/provenance update PipelineRun id=$id status="%step.name completed"
python bin/provenance update StepRun id=$id status="%step.name completed" successful=True

- - On failure:
python bin/provenance update PipelineRun id=$id status="%step.name failed" successful=False
python bin/provenance update StepRun id=$id status="%step.name failed" successful=False


Have to put a UNIQUE restraint on pipeline names in the db

get rid of dbh stuff in favor of sqlalchemy crap

Allow readset configuration files to be anywhere, not just in templates directory

The -h flag should also show the list of available commands.

The way you're handling the aligner issue sucks.  Would it be better
to subclass Step so as to allow steps to have their own logic?  Steps 
would presumably be loaded similarly to the way commands currently are.  
Attributes like 'args' and various suffixes could be set via object 
attributes.

Want to put back in the bit that makes certain object keys (eg step['exe']) into attributes; 
could do this in dict_like: if class defines list of attributes to set. (Note: dict_like already
does something like that...)