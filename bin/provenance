#!/usr/bin/env python
#-*-python-*-

# Implement CRUD operations on a provenance database.

# what happens if these fail?  Can that be user's responsbility?
import yaml, optparse, os, sys, re
from RnaseqGlobals import RnaseqGlobals

try:
    import sqlite3
except:
    from pysqlite2 import dbapi2 as sqlite3

# Try to load the rnaseq modules:
try:
    from Rnaseq.prov import *
except Exception as e:
    needed_dir=os.path.normpath(os.path.abspath(__file__)+"/../../lib")
    sys.stderr.write("Unable to import Rnaseq.  Perhaps you need to add "+needed_dir+" to your PYTHONPATH?\n")
    sys.stderr.write(yaml.dump(e))
    sys.stderr.write("(%s)\n" % e)
    sys.exit(1)



def main():
    usage="usage: %s <cmd> <args> [opts]"
    argv=parse_cmdline(usage)       # not to be confused with sys.argv
    try:
        cmd=argv[1]
    except IndexError as ie:
        die(UserError(usage))
        
    RnaseqGlobals.config=read_config(options.config)

    db_file=os.path.join(RnaseqGlobals.config['rnaseq']['root_dir'], 'db', RnaseqGlobals.config['db']['db_name'])
    dbh=sqlite3.connect(db_file)
    
    cf=CmdFactory(program='provenance')
    cf.add_cmds(RnaseqGlobals.config['provenance']['cmds'])
    
        
    cmd=cf.new_cmd(cmd)
    cmd.run(dbh=dbh,argv=argv)
        
    print "\ndone"

# parse command line opts.  return a list of un-processed args
def parse_cmdline(usage):                    
    parser=optparse.OptionParser(usage)

    parser.add_option("-f","--config", dest="config", help="specify alternative config file",
                      default=os.path.normpath(os.path.abspath(__file__)+"/../../config/rnaseq.conf.yml"))

    parser.add_option("--force", dest="force", help="force excecution of commands even if they overwrite data",
                      action="store_true", default=False)

    parser.add_option("-p","--pipeline", dest="pipeline_name", help="pipeline id (name)")
    parser.add_option("--status", dest="status", help="status value")

    (values, argv)=parser.parse_args(sys.argv)
    global options
    options=values
    optparse.options=values
    return argv                         # return remaining argv values


def read_config(config_file):
    f=open(config_file)
    yml=f.read()
    f.close()
    return yaml.load(yml)



try:
    main()
except UserError as ue:
    die(sys.argv[0]+": "+str(ue))

sys.exit(0)

