#!/bin/env perl
#-*-perl-*-

use warnings;

sub main {
    open(P, 'python -V 2>&1 |') or die "Can't open pipe to python -V: $!\n";
    $py_ver=<P>;
    chomp $py_ver;
    close P;

    $py_ver=~/\d(\.\d*)/;
    $ver=$&;


    $min_ver=2.7;
    if (ver_comp($ver, $min_ver) < 0) {
	warn "Python version $min_ver is required to run the rnaseq pipeline.  You have $ver.  Please upgrade\n";
	exit 1;
    }

    $exe=$0;
    $exe=~s/rnaseq/rnaseq.py/;
    unshift @ARGV, $exe;
    unshift @ARGV, 'python';

    $rc=exec @ARGV;
    warn "rc is $rc???\n" if $ENV{DEBUG};
    exit 1;
}

# compare to version numbers in form \d(\.\d)+, in a manner similar to the <=> operator.
# returns -1 if $v1<$v2, 0 if $v1==$v2, or 1 if $v1>$v2.
sub ver_comp {
    my ($v1, $v2)=@_;
    @v1=split(/\./,$v1);
    @v2=split(/\./,$v2);
    while (1) {
	my $p1=shift @v1;
	my $p2=shift @v2;

	if (!defined $p1 && !defined $p2) { return 0 }
	elsif (defined $p1 and !defined $p2) { return -1 }
	elsif (!defined $p1 and defined $p2) { return 1 }
	
	if ($p2 <=> $p1) { return $p2 <=> $p1 }
    }
    return 0;
}


sub test_ver_comp() {
    foreach my $pair ([2.2, 2.3], ['2.1.3', 2.1], ['2.1.3', '2.1.3'], [3.0, 2.0], [2.1, '2.1.3']) {
	my $op={1=>'<', 0=>'==', -1=>'>'}->{ver_comp(@$pair)};
	warn sprintf("%s %s %s\n", $pair->[0], $op, $pair->[1]);
	
	$op={1=>'<', 0=>'==', -1=>'>'}->{ver_comp($pair->[1], $pair->[0])};
	warn sprintf("%s %s %s\n", $pair->[1], $op, $pair->[0]);
    }
}

main();
#test_ver_comp();
