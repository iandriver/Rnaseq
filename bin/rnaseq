#-*-python-*-

# The main rnaseq entry point
# fixme: right now it's just a testbed for development

import sys, os, yaml, optparse
from warn import *

# Try to load the rnaseq modules:
try:
    needed_dir=os.path.normpath(os.path.abspath(__file__)+"/../../lib")
    sys.path.append(needed_dir)
    from Rnaseq import *
except ImportError as e:
    sys.stderr.write("Unable to import Rnaseq.  Perhaps you need to add "+needed_dir+" to your PYTHONPATH?\n")
    sys.stderr.write(yaml.dump(e))
    sys.stderr.write("(%s)\n" % e)
    sys.exit(1)


########################################################################

def main():
    usage="usage: %s <cmd> [-p <pipeline>] [-r <readset>] [options]" % sys.argv[0] # fixme: form might be different; might be more like git
    argv=RnaseqGlobals.initialize(usage)       # not to be confused with sys.argv

    # get the command:
    try: 
        cmd=argv[1]
    except IndexError as ie:
        die(UserError(usage))
    cf=CmdFactory(program='rnaseq')
    cf.add_cmds(RnaseqGlobals.conf_value('rnaseq','cmds'))
    cmd=cf.new_cmd(cmd)

    # run the command 
    cmd.run(argv, config=RnaseqGlobals.config)
    print "rnaseq: done"

########################################################################

try:
    main()

except UserError as ue:
    die(ue)

except ProgrammerGoof as pg:
    warn("An internal error occured:\n")
    import traceback
    traceback.print_exc()
    sys.exit(1)

except ConfigError as ce:
    warn("A configuration error occured:\n")
    die(ce)

except RnaseqException as re:
    warn("An unexpected rnaseq exception has occured: %s\n" % re)
    if re.show_traceback:
        import traceback
        traceback.print_exc()
    die(re)

